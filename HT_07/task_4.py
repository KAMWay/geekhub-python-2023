# 4. Створіть функцію <morse_code>, яка приймає на вхід рядок у вигляді коду Морзе та виводить декодоване значення (латинськими літерами).
#    Особливості:
#     - використовуються лише крапки, тире і пробіли (.- )
#     - один пробіл означає нову літеру
#     - три пробіли означають нове слово
#     - результат може бути case-insensetive (на ваш розсуд - велики чи маленькими літерами).
#     - для простоти реалізації - цифри, знаки пунктуацїї, дужки, лапки тощо використовуватися не будуть. Лише латинські літери.
#     - додайте можливість декодування сервісного сигналу SOS (...---...)
#     Приклад:
#     --. . . -.- .... ..- -...   .. ...   .... . .-. .
#     результат: GEEKHUB IS HERE

def morse_code(code_str: str) -> str:
    _code_dict = {
        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..',
        'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..',
        'SOS': '...---...'
    }

    _code_dict_reverse = {value: key for key, value in _code_dict.items()}

    _rez = ''
    for word in code_str.split('   '):
        for ch in word.split(' '):
            _rez += ' ' if ch == '' else '_' if not _code_dict_reverse.get(ch) else _code_dict_reverse.get(ch)
        _rez += ' '

    return _rez


if __name__ == '__main__':
    print(morse_code('...---...   --. . . -.- .... ..- -...   ...---...   .. ...   .... . .-. .   ...---...'))
