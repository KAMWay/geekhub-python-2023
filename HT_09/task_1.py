# Програма-світлофор.
# Створити програму-емулятор світлофора для авто і пішоходів. Після запуска програми на екран
# виводиться в лівій половині - колір автомобільного, а в правій - пішохідного світлофора.
# Кожну 1 секунду виводиться поточні кольори.
# Через декілька ітерацій - відбувається зміна кольорів - логіка така сама як і в звичайних світлофорах
# (пішоходам зелений тільки коли автомобілям червоний).
# Приблизний результат роботи наступний:
#       Red        Green
#       Red        Green
#       Red        Green
#       Red        Green
#       Yellow     Red
#       Yellow     Red
#       Green      Red
#       Green      Red
#       Green      Red
#       Green      Red
#       Yellow     Red
#       Yellow     Red
#       Red        Green

import time


def colors_generator():
    colors = ['Red', 'Yellow', 'Green', 'Yellow']

    color_generator = (color for color in colors)
    while True:
        try:
            yield next(color_generator)
        except StopIteration:
            color_generator = (color for color in colors)


def footer_color(traffic_color: str) -> str:
    traffic_lights_colors = [{'traffic': 'Red', 'footer': 'Green'},
                             {'traffic': 'Green', 'footer': 'Red'},
                             {'traffic': 'Yellow', 'footer': 'Red'}]
    return next(color_dict['footer'] for color_dict in traffic_lights_colors if color_dict['traffic'] == traffic_color)


def color_delay(color: str) -> int:
    colors_delay = [{'color': 'Red', 'delay': 4},
                    {'color': 'Green', 'delay': 4},
                    {'color': 'Yellow', 'delay': 2}]
    return next(color_dict['delay'] for color_dict in colors_delay if color_dict['color'] == color)


def traffic_lights():
    time_sleep = 1
    for color in colors_generator():
        delay = color_delay(color)
        while delay > 0:
            print(f'{color:<10s} {footer_color(color):<10s}')
            delay -= 1
            time.sleep(time_sleep)


if __name__ == '__main__':
    traffic_lights()

# 2. Написати функцію, яка приймає два параметри: ім'я (шлях) файлу та кількість символів. Файл також додайте в
# репозиторій. На екран повинен вивестись список із трьома блоками - символи з початку, із середини та з кінця файлу.
# Кількість символів в блоках - та, яка введена в другому параметрі. Придумайте самі, як обробляти помилку, наприклад,
# коли кількість символів більша, ніж є в файлі або, наприклад, файл із двох символів і треба вивести по одному символу,
# то що виводити на місці середнього блоку символів?). Не забудьте додати перевірку чи файл існує.

# 3. Програма-банкомат.
#    Використувуючи функції створити програму з наступним функціоналом:
#       - підтримка 3-4 користувачів, які валідуються парою ім'я/пароль (файл <users.CSV>);
#       - кожен з користувачів має свій поточний баланс (файл <{username}_balance.TXT>) та історію транзакцій
#         (файл <{username_transactions.JSON>);
#       - є можливість як вносити гроші, так і знімати їх. Обов'язкова перевірка введених даних (введено цифри;
#         знімається не більше, ніж є на рахунку і т.д.).
#    Особливості реалізації:
#       - файл з балансом - оновлюється кожен раз при зміні балансу (містить просто цифру з балансом);
#       - файл - транзакціями - кожна транзакція у вигляді JSON рядка додається в кінець файла;
#       - файл з користувачами: тільки читається. Але якщо захочете реалізувати функціонал додавання нового
#         користувача - не стримуйте себе :)
#    Особливості функціонала:
#       - за кожен функціонал відповідає окрема функція;
#       - основна функція - <start()> - буде в собі містити весь workflow банкомата:
#       - на початку роботи - логін користувача (програма запитує ім'я/пароль). Якщо вони неправильні - вивести
#         повідомлення про це і закінчити роботу (хочете - зробіть 3 спроби, а потім вже закінчити роботу -
#         все на ентузіазмі :))
#       - потім - елементарне меню типн:
#         Введіть дію:
#            1. Продивитись баланс
#            2. Поповнити баланс
#            3. Вихід
#       - далі - фантазія і креатив, можете розширювати функціонал, але основне завдання має бути повністю реалізоване :)
#     P.S. Увага! Файли мають бути саме вказаних форматів (csv, txt, json відповідно)
#     P.S.S. Добре продумайте структуру програми та функцій (edited)
